#include "Renderer/Sampler_DX12.hpp"
#include "Renderer/D3D12/GraphicsAPI_DX12.hpp"
#include "Renderer/D3D12/DescriptorAllocator_DX12.hpp"

namespace Butterfly
{
    namespace Utils
    {
        // Generated by chatgpt.
        // Prompt: "default sampler dx12 serttings cpp"
        inline D3D12_SAMPLER_DESC CreateDefaultSamplerDesc()
        {
            BF_PROFILE_EVENT();

            D3D12_SAMPLER_DESC samplerDesc = {};
            samplerDesc.Filter = D3D12_FILTER_MIN_MAG_MIP_POINT; // Linear filtering for minification, magnification, and mipmapping.
            samplerDesc.AddressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP; // Wrap addressing mode for the U coordinate.
            samplerDesc.AddressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP; // Wrap addressing mode for the V coordinate.
            samplerDesc.AddressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP; // Wrap addressing mode for the W coordinate.
            samplerDesc.MipLODBias = 0.0f;                         // No bias for mip-level-of-detail.
            samplerDesc.MaxAnisotropy = 1;                         // Anisotropic filtering is off.
            samplerDesc.ComparisonFunc = D3D12_COMPARISON_FUNC_ALWAYS; // No comparison filtering.
            samplerDesc.BorderColor[0] = 0.0f;                     // Border color (only used if Address mode is BORDER).
            samplerDesc.BorderColor[1] = 0.0f;
            samplerDesc.BorderColor[2] = 0.0f;
            samplerDesc.BorderColor[3] = 0.0f;
            samplerDesc.MinLOD = 0.0f;                             // Minimum mip level.
            samplerDesc.MaxLOD = D3D12_FLOAT32_MAX;                // Maximum mip level.

            return samplerDesc;
        }
    }




	BFSampler::BFSampler(const D3D12_SAMPLER_DESC* desc)
	{
        BF_PROFILE_EVENT();

        const D3D12_SAMPLER_DESC* samplerDesc = desc;
        auto d = Utils::CreateDefaultSamplerDesc();
        if (!desc)
        {
            samplerDesc = &d;
        }
		m_viewIndex = DX12API()->DescriptorAllocatorSampler()->CreateSampler(samplerDesc);
	}

	BFSampler::~BFSampler()
	{
		DX12API()->DescriptorAllocatorSampler()->FreeHandle(m_viewIndex);
	}
}